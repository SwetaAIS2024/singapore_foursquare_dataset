import streamlit as st
import os
import pandas as pd
import json
from glob import glob

# --- Sidebar: File Browser ---
st.sidebar.title('File Browser')

# Clustering results directory
clustering_dir = 'analysis_older_dataset/Final_code/clustering'
json_dir = 'analysis_older_dataset/Final_code/json_dataset_generation'
syn_org_eval_dir = 'analysis_older_dataset/Final_code/syn_org_eval'

# List files in clustering results

def list_files(directory, exts=None):
    files = []
    for f in os.listdir(directory):
        if exts is None or any(f.lower().endswith(ext) for ext in exts):
            files.append(f)
    return sorted(files)

clustering_files = list_files(clustering_dir, exts=['.csv', '.png', '.jpg', '.jpeg'])
json_files = list_files(json_dir, exts=['.json'])
syn_org_eval_files = list_files(syn_org_eval_dir, exts=['.csv', '.txt'])

# Clustering Results
st.sidebar.subheader('Clustering Results (CSV/Image)')
if clustering_files:
    selected_clustering_file = st.sidebar.selectbox('Select clustering result file', clustering_files)
else:
    selected_clustering_file = None
    st.sidebar.info('No clustering result files found.')

# User Profile JSONs
st.sidebar.subheader('User Profile JSONs')
if json_files:
    selected_json_file = st.sidebar.selectbox('Select user profile JSON', json_files)
else:
    selected_json_file = None
    st.sidebar.info('No user profile JSON files found.')


# --- Main: Display Results ---
st.title('Foursquare Singapore Analysis Dashboard')
st.header('Clustering Results')

if selected_clustering_file:
    if selected_clustering_file.endswith('.csv'):
        df = pd.read_csv(os.path.join(clustering_dir, selected_clustering_file))
        st.dataframe(df)
    elif selected_clustering_file.endswith(('.png', '.jpg', '.jpeg')):
        st.image(os.path.join(clustering_dir, selected_clustering_file))
    else:
        st.text('File preview not supported for this file type.')

# --- Cluster scatter plot ---
path = os.path.join(clustering_dir, 'matrix_output_user_cluster_scatter.png')
if os.path.exists(path):
    st.subheader('Cluster Scatter Plot')
    st.image(path, caption='Cluster Scatter Plot of Users')

# --- Comparison Dashboard ---
st.header('Original vs Synthetic Dataset Comparison')
org_counts_path = os.path.join(syn_org_eval_dir, 'org_user_checkin_counts.csv')
syn_counts_path = os.path.join(syn_org_eval_dir, 'syn_user_checkin_counts.csv')
if os.path.exists(org_counts_path) and os.path.exists(syn_counts_path):
    org_counts = pd.read_csv(org_counts_path, index_col=0, names=['user_id','org_checkins'])
    syn_counts = pd.read_csv(syn_counts_path, index_col=0, names=['user_id','syn_checkins'])
    st.subheader('Check-in Counts per User')
    st.line_chart({
        'Original': org_counts.iloc[:,0].sort_index().values,
        'Synthetic': syn_counts.iloc[:,0].sort_index().values
    })
    st.write('Summary (Original):', org_counts.describe())
    st.write('Summary (Synthetic):', syn_counts.describe())
else:
    st.info('Comparison CSVs not found. Please generate them in syn_org_eval.')

st.markdown('---')
st.caption('Dashboard generated by Streamlit. All results and files are interactive.')


# Display JSON user profile selection as before
if selected_json_file:
    st.header('User Profile JSON')
    json_path = os.path.join(json_dir, selected_json_file)
    with open(json_path, 'r') as f:
        user_json = json.load(f)
    st.json(user_json)